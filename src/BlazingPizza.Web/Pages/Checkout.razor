@page "/checkout"
@page "/checkout/{Id:guid}"

@using Microsoft.Extensions.Caching.Distributed
@using System.Text.Json
@using Microsoft.Extensions.Logging
@inject OrderState OrderState
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IDistributedCache Cache
@inject ILogger<Checkout> Logger
@inject AuthenticationStateProvider AuthProvider

<div class="main">
    <AuthorizeView Context="authContext">
        <NotAuthorized>
            <h2>Redirecting you...</h2>
        </NotAuthorized>
        <Authorized>
            <EditForm Model="OrderState.Order.DeliveryAddress" OnValidSubmit="PlaceOrder">
                <div class="checkout-cols">
                    <div class="checkout-order-details">
                        <h4>Review order</h4>
                        <OrderReview Order="@OrderState.Order" />
                    </div>

                    <div class="checkout-delivery-address">
                        <h4>Deliver to...</h4>
                        <AddressEditor Address="OrderState.Order.DeliveryAddress" />
                    </div>
                </div>

                <button type="submit" class="checkout-button btn btn-warning" disabled="@isSubmitting">
                    Place order
                </button>

                <DataAnnotationsValidator />
            </EditForm>
        </Authorized>
    </AuthorizeView>
</div>

@code {
    bool isSubmitting;
    [CascadingParameter] Task<AuthenticationState> AuthenticationStateTask { get; set; }
    [Parameter] public Guid? Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;
        if (!authState.User.Identity.IsAuthenticated)
        {
            // The server won't accept orders from unauthenticated users, so avoid
            // an error by making them log in at this point
            if (OrderState.Order.Pizzas.Any())
            {
                var order = System.Text.Encoding.UTF8.GetBytes(JsonSerializer.Serialize(OrderState.Order));
                Id = Guid.NewGuid();
                await Cache.SetAsync(Id.ToString(), order, new DistributedCacheEntryOptions());
                NavigationManager.NavigateTo($"/user/signin?redirectUri=/checkout/{Id}", true);
            }
            else
            {
                NavigationManager.NavigateTo($"/user/signin?redirectUri=/checkout/", true);
            }
        }

        // Try to recover any temporary saved order
        if (!OrderState.Order.Pizzas.Any())
        {
            if (Id != null)
            {
                var previousOrder = await Cache.GetAsync(Id.ToString());
                if (previousOrder != null)
                {
                    var order = JsonSerializer.Deserialize<Order>(previousOrder);
                    OrderState.ReplaceOrder(order);
                    await Cache.RemoveAsync(Id.ToString());
                    Id = null;
                }
            }
            else
            {
                // There's nothing check out - go to home
                NavigationManager.NavigateTo("");
            }
        }
    }

    async Task PlaceOrder()
    {
        isSubmitting = true;

        try
        {
            var authState = await AuthProvider.GetAuthenticationStateAsync();
            OrderState.Order.UserId = authState.User.Identity.Name;

            var client = HttpClientFactory.CreateClient("orders");
            var newOrderId = await client.PostJsonAsync<Guid>("orders", OrderState.Order);
            OrderState.ResetOrder();
            NavigationManager.NavigateTo($"myorders/{newOrderId}");
        }
        catch (Exception ex)
        {
            Logger.LogError("Error placing order: {ex}", ex);
        }
        finally
        {
            isSubmitting = false;
        }
    }
}
